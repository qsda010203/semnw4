/*

EXP 3rd

-----BitStuff------
import java.util.*;
class BitStuff{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the bits:");
        String s=sc.nextLine();
        String res=bitstuffing(s);
        System.out.println("Original Data Stream:");
        System.out.println(s);
        System.out.println("Bitstuffed Data Stream:");
        System.out.println(res);
    }
    public static String bitstuffing(String s){
        StringBuilder sb=new StringBuilder();
        int count=0;
        for(int i=0;i<s.length();i++){
            char bit=s.charAt(i);
            sb.append(bit);
            if(bit=='1'){
                count++;
            }else{
                count=0;
            }
            if(count==5){
                sb.append('0');
                count=0;
            }
        }
        return sb.toString();
    }
}


-----------CharStuff----------

import java.util.*;
class CharStuff{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the number of Characters:");
        int n=sc.nextInt();
        System.out.println("Enter the characters:");
        String arr[]=new String[n];
        for(int i=0;i<n;i++){
            arr[i]=sc.next();
        }
        for(int i=0;i<n;i++){
            if(arr[i].equals("dle")){
                arr[i]="dle dle";
            }
        }
        System.out.println("Transmitted message is: ");
        System.out.print("dle stx ");
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.print("dle etx");
    }
}

---------------------------------------------------------------------------------------------------------------------------------
EXP-4(Sliding WIndow)

-------------------slidsender--------------------

import java.net.*;
import java.io.*;

public class slidsender {
    public static void main(String a[]) throws Exception {
        ServerSocket ser = new ServerSocket(10);
        Socket s = ser.accept();
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        BufferedReader in1 = new BufferedReader(new InputStreamReader(s.getInputStream()));
        String sbuff[] = new String[8];
        PrintStream p;
        int sptr = 0, sws = 8, nf, ano, i;
        String ch;
        
        do {
            p = new PrintStream(s.getOutputStream());
            System.out.print("Enter the no. of frames: ");
            nf = Integer.parseInt(in.readLine());
            p.println(nf);
            
            if (nf <= sws - 1) {
                System.out.println("Enter " + nf + " Messages to be sent\n");
                for (i = 1; i <= nf; i++) {
                    sbuff[sptr] = in.readLine();
                    p.println(sbuff[sptr]);
                    sptr = ++sptr % 8;
                }
                sws -= nf;
                System.out.print("Acknowledgment received");
                ano = Integer.parseInt(in1.readLine());
                System.out.println(" for " + ano + " frames");
                sws += nf;
            } else {
                System.out.println("The no. of frames exceeds window size");
                break;
            }

            System.out.print("\nDo you want to send some more frames: ");
            ch = in.readLine();
            p.println(ch);
        } while (ch.equals("yes"));
        
        s.close();
    }
}

----------------------slidreceiver-----------------------
import java.net.*;
import java.io.*;

class slidreceiver {
    public static void main(String a[]) throws Exception {
        Socket s = new Socket(InetAddress.getLocalHost(), 10);
        BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
        PrintStream p = new PrintStream(s.getOutputStream());
        int i = 0, rptr = -1, nf, rws = 8;
        String rbuf[] = new String[8];
        String ch;
        System.out.println();
        
        do {
            nf = Integer.parseInt(in.readLine());
            if (nf <= rws - 1) {
                for (i = 1; i <= nf; i++) {
                    rptr = ++rptr % 8;
                    rbuf[rptr] = in.readLine();
                    System.out.println("The received Frame " + rptr + " is: " + rbuf[rptr]);
                }
                rws -= nf;
                System.out.println("\nAcknowledgment sent\n");
                p.println(rptr + 1);
                rws += nf;
            } else {
                break;
            }
            ch = in.readLine();
        } while (ch.equals("yes"));
    }
}

-------------Stop and Wait-------------------
Sender:
import java.io.*;
import java.net.*;

public class Sender {
    Socket sender;
    ObjectOutputStream out;
    ObjectInputStream in;
    String packet, ack, str, msg;
    int n, i = 0, sequence = 0;

    Sender() {}

    public void run() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            System.out.println("Waiting for Connection....");
            sender = new Socket("localhost", 2004);
            sequence = 0;
            out = new ObjectOutputStream(sender.getOutputStream());
            out.flush();
            in = new ObjectInputStream(sender.getInputStream());
            str = (String) in.readObject();
            System.out.println("receiver > " + str);
            System.out.println("Enter the data to send....");
            packet = br.readLine();
            n = packet.length();

            do {
                try {
                    if (i < n) {
                        msg = String.valueOf(sequence);
                        msg = msg.concat(packet.substring(i, i + 1));
                    } else if (i == n) {
                        msg = "end";
                        out.writeObject(msg);
                        break;
                    }
                    out.writeObject(msg);
                    sequence = (sequence == 0) ? 1 : 0;
                    out.flush();
                    System.out.println("data sent>" + msg);
                    ack = (String) in.readObject();
                    System.out.println("waiting for ack.....\n\n");
                    if (ack.equals(String.valueOf(sequence))) {
                        i++;
                        System.out.println("receiver > packet received\n\n");
                    } else {
                        System.out.println("Time out resending data....\n\n");
                        sequence = (sequence == 0) ? 1 : 0;
                    }
                } catch (Exception e) {}
            } while (i < n + 1);

            System.out.println("All data sent. Exiting.");
        } catch (Exception e) {}
        finally {
            try {
                in.close();
                out.close();
                sender.close();
            } catch (Exception e) {}
        }
    }

    public static void main(String args[]) {
        Sender s = new Sender();
        s.run();
    }
}

Reciever:
import java.io.*;
import java.net.*;

public class Receiver {
    ServerSocket receiver;
    Socket connection = null;
    ObjectOutputStream out;
    ObjectInputStream in;
    String packet, ack, data = "";
    int i = 0, sequence = 0;

    public Receiver() {}

    public void run() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            receiver = new ServerSocket(2004, 10);
            System.out.println("Waiting for connection...");
            connection = receiver.accept();
            sequence = 0;
            System.out.println("Connection established:");
            out = new ObjectOutputStream(connection.getOutputStream());
            out.flush();
            in = new ObjectInputStream(connection.getInputStream());
            out.writeObject("connected.");

            do {
                try {
                    packet = (String) in.readObject();
                    if (Integer.valueOf(packet.substring(0, 1)) == sequence) {
                        data += packet.substring(1);
                        sequence = (sequence == 0) ? 1 : 0;
                        System.out.println("\n\nreceiver >" + packet);
                    } else {
                        System.out.println("\n\nreceiver >" + packet + " duplicate data");
                    }

                    if (i < 3) {
                        out.writeObject(String.valueOf(sequence));
                        i++;
                    } else {
                        out.writeObject(String.valueOf((sequence + 1) % 2));
                        i = 0;
                    }
                } catch (Exception e) {}
            } while (!packet.equals("end"));

            System.out.println("Data received = " + data);
            out.writeObject("connection ended.");
        } catch (Exception e) {}
        finally {
            try {
                in.close();
                out.close();
                receiver.close();
            } catch (Exception e) {}
        }
    }

    public static void main(String args[]) {
        Receiver s = new Receiver();
        while (true) {
            s.run();
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------

EXP 5
-------

-------------PingServer----------

import java.io.*;
import java.net.*;

public class PingServer {
    public static void main(String[] args) {
        try {
            ServerSocket serverSocket = new ServerSocket(5555);
            System.out.println("Server is running...");

            while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("Client connected: " + socket);

                BufferedReader inputReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                PrintWriter outputWriter = new PrintWriter(socket.getOutputStream(), true);

                for (int i = 0; i < 4; i++) {
                    String message = inputReader.readLine();
                    System.out.println("Received: " + message);
                    outputWriter.println("Reply from " + socket.getInetAddress() + "; Length " + message.length());
                }

                System.out.println("Data sent successfully.");
                socket.close();
                System.out.println("Client disconnected.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

-------------PingClient--------------


import java.io.*;
import java.net.Socket;

public class PingClient {
    public static void main(String[] args) throws Exception {
        try (Socket socket = new Socket("127.0.0.1", 5555);
             BufferedReader inputReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             PrintWriter outputWriter = new PrintWriter(socket.getOutputStream(), true)) {

            String message = "Welcome to network programming world";

            for (int i = 0; i < 4; i++) {
                outputWriter.println(message);
                System.out.println(inputReader.readLine());
            }
        }
    }
}


-----------------TraceRoute-------------
import java.io.*;

public class TraceServer {
    public static void main(String[] args) {
        try {
            System.out.print("Enter the IP Address to be Traced: ");
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            String ip = reader.readLine();

            ProcessBuilder processBuilder = new ProcessBuilder("tracert", ip); //"tracepath"
            Process process = processBuilder.start();

            BufferedReader inputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = inputReader.readLine()) != null) {
                System.out.println(" " + line);
            }

            int exitCode = process.waitFor();
            if (exitCode != 0) {
                System.err.println("Error: Traceroute command failed with exit code " + exitCode);
            }
        } catch (IOException | InterruptedException e) {
            System.err.println(e.getMessage());
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------
Exp 6
-------------------FileTransfer----------
FileServer:

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
class FileServer {
public static void main(String[] args) throws IOException {
ServerSocket serverSocket = new ServerSocket(15123);
System.out.println("Server waiting for connections...");
Socket socket = serverSocket.accept();
System.out.println("Connection established: " + socket);
File transferFile = new File("lex.l");
byte[] bytearray = new byte[(int) transferFile.length()];FileInputStream fin = new FileInputStream(transferFile);
BufferedInputStream bin = new BufferedInputStream(fin);
bin.read(bytearray, 0, bytearray.length);
OutputStream os = socket.getOutputStream();
System.out.println("Sending file...");
os.write(bytearray, 0, bytearray.length);
os.flush();
System.out.println("File Sent successfully");
socket.close();
serverSocket.close();
}}


FileClient:

import java.io.*;
import java.net.Socket;

public class FileClient {
    public static void main(String[] args) {
        try {
            // Open connection to the server at port 15123
            Socket socket = new Socket("127.0.0.1", 15123);
            System.out.println("Connected to server: " + socket);

            // File reception
            InputStream is = socket.getInputStream();

            // Enter the destination file name
            FileOutputStream fos = new FileOutputStream("lexa.l");
            BufferedOutputStream bos = new BufferedOutputStream(fos);

            // Buffer to read file chunks
            int bufferSize = 1024;
            byte[] byteArray = new byte[bufferSize];
            int bytesRead;

            // Read file data from the server
            while ((bytesRead = is.read(byteArray, 0, bufferSize)) != -1) {
                bos.write(byteArray, 0, bytesRead);
            }

            // Flush and close the output stream
            bos.flush();
            bos.close();
            System.out.println("File received successfully.");

            // Close resources
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

--------------RemoteCommandExecution----------------------

RemoteCommandServer

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

class RemoteCommandServer {
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the Port Address: ");
        int port = Integer.parseInt(scanner.nextLine());

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server is Ready To Receive a Command.");
            System.out.println("Waiting...");

            // Wait and accept a connection
            try (Socket clientSocket = serverSocket.accept()) {
                if (clientSocket.isConnected()) {
                    System.out.println("Client Socket is Connected Successfully.");
                }

                InputStream in = clientSocket.getInputStream();
                OutputStream out = clientSocket.getOutputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                PrintWriter writer = new PrintWriter(out, true);

                String cmd = reader.readLine();
                System.out.println("Received command: " + cmd);

                ProcessBuilder processBuilder = new ProcessBuilder(cmd.split("\\s+"));
                Process process = processBuilder.start();

                // Read the command output and send it back to the client
                try (BufferedReader commandOutput = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                    String outputLine;
                    while ((outputLine = commandOutput.readLine()) != null) {
                        writer.println(outputLine);
                    }
                }
            }
        }
    }
}












RemoteCommandClient:


import java.io.*;
import java.net.Socket;
import java.util.Scanner;

class RemoteCommandClient {
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the Port Address: ");
        int port = Integer.parseInt(scanner.nextLine());

        try (Socket socket = new Socket("localhost", port)) {
            if (socket.isConnected()) {
                System.out.println("Server Socket is Connected Successfully.");
            }

            InputStream in = socket.getInputStream();
            OutputStream out = socket.getOutputStream();
            BufferedReader userInputReader = new BufferedReader(new InputStreamReader(System.in));
            BufferedReader serverReader = new BufferedReader(new InputStreamReader(in));
            PrintWriter writer = new PrintWriter(out, true);

            System.out.print("Enter the Command to be Executed: ");
            String command = userInputReader.readLine();
            writer.println(command);

            // Read and print the command output received from the server
            String serverOutput;
            while ((serverOutput = serverReader.readLine()) != null) {
                System.out.println("Server Output: " + serverOutput);
            }
        }
    }
}

client cmd:
Enter the command to be executed : uname -a

-------------CHAT------------------------
chatserver

import java.io.*;
import java.net.ServerSocket;import java.net.Socket;
class ChatServer {
public static void main(String[] args) throws IOException {
ServerSocket serverSocket = new ServerSocket(3000);
System.out.println("Server ready for chatting");
Socket clientSocket = serverSocket.accept();
System.out.println("Client connected: " + clientSocket);
// Reading from keyboard
BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in));
// Sending to client
OutputStream ostream = clientSocket.getOutputStream();
PrintWriter pwrite = new PrintWriter(ostream, true);
// Receiving from client
InputStream istream = clientSocket.getInputStream();
BufferedReader receiveRead = new BufferedReader(new InputStreamReader(istream)); String
receiveMessage, sendMessage;
while (true) {
// Receive message from the client
if ((receiveMessage = receiveRead.readLine()) != null)
{ System.out.println("Client: " + receiveMessage);
}
// Read message from the server's console
sendMessage = keyRead.readLine();
// Send the message to the client
pwrite.println("Server: " + sendMessage);
pwrite.flush();
} }}

chatClient

import java.io.*;
import java.net.Socket;
class ChatClient {
public static void main(String[] args) throws IOException { Socket
socket = new Socket("127.0.0.1", 3000);
System.out.println("Connected to server: " + socket);
// Reading from keyboard
BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in));
// Sending to server
OutputStream ostream = socket.getOutputStream();
PrintWriter pwrite = new PrintWriter(ostream, true);
// Receiving from server
InputStream istream = socket.getInputStream();
BufferedReader receiveRead = new BufferedReader(new InputStreamReader(istream)); String
receiveMessage, sendMessage;
System.out.println("Start the chitchat, type and press Enter key");
while (true) {
// Read message from the client's console
sendMessage = keyRead.readLine();
// Send the message to the server
pwrite.println("Client: " + sendMessage);
pwrite.flush();
// Receive message from the server
if ((receiveMessage = receiveRead.readLine()) != null) {
System.out.println(receiveMessage);
} } }}




CONCURRENT SERVER

Server

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class cmdserver {
    public static void main(String[] args) throws IOException {
        ServerSocket ss = new ServerSocket(8500);
        System.out.println("Waiting for clients...");
        ExecutorService executorService = Executors.newFixedThreadPool(5);
        while (true) {
            Socket clientSocket = ss.accept();
            System.out.println("Client connected: " + clientSocket);
            // Create a new thread for each client
            executorService.execute(new ClientHandler(clientSocket));
        }
    }
}

class ClientHandler implements Runnable {
    private final Socket clientSocket;

    public ClientHandler(Socket clientSocket) {
        this.clientSocket = clientSocket;
    }

    @Override
    public void run() {
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String clientName = br.readLine();
            System.out.println("\nCLIENT NAME: " + clientName);
            int num = Integer.parseInt(br.readLine());
            int square = num * num;
            PrintWriter pw = new PrintWriter(clientSocket.getOutputStream(), true);
            pw.println(square);
            System.out.println("OUTPUT - The square of " + num + " is " + square);
            // Close the client socket
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

Client1

import java.io.*;
import java.net.Socket;
public class Client1 {public static void main(String[] args) throws IOException { Socket
socket = new Socket("localhost", 8500);
BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int
num = Integer.parseInt(br.readLine());
PrintWriter pw = new PrintWriter(socket.getOutputStream(), true);
pw.println("Client 1");
pw.println(num);
BufferedReader br1 = new BufferedReader(new InputStreamReader(socket.getInputStream()));
int square = Integer.parseInt(br1.readLine());
System.out.println("Square of " + num + " is " + square + "\n");
// Close the socket
socket.close();
}
}

Client2

import java.io.*;
import java.net.Socket;
public class Client2 {
public static void main(String[] args) throws IOException { Socket
s = new Socket("localhost", 8500);BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int
num = Integer.parseInt(br.readLine());
PrintWriter pw = new PrintWriter(s.getOutputStream(), true);
pw.println("Client 2");
pw.println(num);
BufferedReader br1 = new BufferedReader(new InputStreamReader(s.getInputStream()));
double squareRoot = Double.parseDouble(br1.readLine());
System.out.println("Square of " + num + " is " + squareRoot);
s.close();
}
}
--------------------------------------------------------------------------------------------------------------------------------

EXP 7
---------------TCPServer-----------------
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

public class TCPServer {
    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(5000)) {
            System.out.println("Server is listening on port 5000");

            while (true) {
                try (Socket socket = serverSocket.accept();
                     BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                     BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {

                    String msgFromClient;
                    while ((msgFromClient = reader.readLine()) != null) {
                        System.out.println("Client: " + msgFromClient);
                        writer.write("MSG Received\n");
                        writer.flush();
                        if (msgFromClient.equalsIgnoreCase("BYE")) {
                            break;
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

---------------TCPClient--------------------

import java.io.*;
import java.net.Socket;

public class TCPClient {
    public static void main(String[] args) {
        try (Socket socket = new Socket("127.0.0.1", 5000);
             BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
             BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {

            System.out.println("Connected");
            String line;
            while (!(line = input.readLine()).equalsIgnoreCase("BYE")) {
                writer.write(line + "\n");
                writer.flush();
                System.out.println("Server: " + reader.readLine());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

--------------------------------------------------------------------------------------------------------------------------------
EXP 8 (HTTP webserver)

---------------Client(image must be in jpg ,and path should be \\)--------------

import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

public class Client {
    public static void main(String args[]) throws Exception {
        Socket soc;
        BufferedImage img = null;
        soc = new Socket("localhost", 4000);
        System.out.println("Client is running.");

        try {
            System.out.println("Reading image from disk.");
            \\copy the path of the image
            img = ImageIO.read(new File("C:\\Users\\bhuvi\\OneDrive\\Desktop\\1.jpg"));
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", baos);
            baos.flush();
            byte[] bytes = baos.toByteArray();
            baos.close();
            System.out.println("Sending image to server.");

            OutputStream out = soc.getOutputStream();
            DataOutputStream dos = new DataOutputStream(out);
            dos.writeInt(bytes.length);
            dos.write(bytes, 0, bytes.length);
            System.out.println("Image sent to server.");

            // Receive response from server (optional)
            InputStream in = soc.getInputStream();

            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String response = br.readLine();
            System.out.println("Server response: " + response);

            dos.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            soc.close();
        }
    }
}

-------------------Server------------------

import java.io.*;
import java.net.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.*;

public class Server {
    public static void main(String args[]) throws Exception {
        ServerSocket server = null;
        Socket socket;
        server = new ServerSocket(4000);
        System.out.println("Server Waiting for image");

        while (true) {
            socket = server.accept();
            System.out.println("Client connected.");

            // Receive image from client
            InputStream in = socket.getInputStream();
            DataInputStream dis = new DataInputStream(in);
            int len = dis.readInt();
            System.out.println("Image Size: " + len / 1024 + "KB");
            byte[] data = new byte[len];
            dis.readFully(data);

            // Convert byte array to image
            ByteArrayInputStream ian = new ByteArrayInputStream(data);
            BufferedImage bImage = ImageIO.read(ian);

            // Display image in a JFrame (optional)
            JFrame f = new JFrame("Server");
            ImageIcon icon = new ImageIcon(bImage);
            JLabel label = new JLabel(icon);
            f.add(label);
            f.pack();
            f.setVisible(true);

            // Send response to client (optional)
            OutputStream out = socket.getOutputStream();
            PrintWriter pw = new PrintWriter(out, true);
            pw.println("Image received successfully.");

            out.close();
            dis.close();
            in.close();
            socket.close();
        }
    }
}
--------------------------------------------------------------------------------------------------------------------------------
Exp 9

import java.util.Scanner;

class Subnet {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.print("IP address: ");
        String ip = sc.nextLine();
        String splitIp[] = ip.split("\\."); // Split the string after every .
        String splitBip[] = new String[4]; // Split binary IP
        String bip = "";

        for (int i = 0; i < 4; i++) {
            splitBip[i] = appendZeros(Integer.toBinaryString(Integer.parseInt(splitIp[i])));
            bip += splitBip[i];
        }

        System.out.println("Binary Format: " + bip);
        System.out.print("Enter the number of addresses in each subnet: ");
        int n = sc.nextInt();

        // Calculation of mask
        int bits = (int) Math.ceil(Math.log(n) / Math.log(2));
        int mask = 32 - bits;
        System.out.println("Subnet mask = " + mask);

        // Calculation of first address and last address
        int fbip[] = new int[32];
        for (int i = 0; i < 32; i++) fbip[i] = bip.charAt(i) - '0'; // Convert character '0', '1' to integer 0, 1
        for (int i = 31; i > 31 - bits; i--) // Get first address by ANDing last n bits with 0
            fbip[i] &= 0;
        
        String fip[] = {"", "", "", ""};
        for (int i = 0; i < 32; i++)
            fip[i / 8] += fbip[i];
        
        System.out.print("Network address is = ");
        for (int i = 0; i < 4; i++) {
            System.out.print(Integer.parseInt(fip[i], 2));
            if (i != 3) System.out.print(".");
        }
        System.out.println();

        int lbip[] = new int[32];
        for (int i = 0; i < 32; i++) lbip[i] = bip.charAt(i) - '0'; // Convert character '0', '1' to integer 0, 1
        for (int i = 31; i > 31 - bits; i--) // Get last address by ORing last n bits with 1
            lbip[i] |= 1;
        
        String lip[] = {"", "", "", ""};
        for (int i = 0; i < 32; i++)
            lip[i / 8] += lbip[i];
        
        System.out.print("Broadcast address is = ");
        for (int i = 0; i < 4; i++) {
            System.out.print(Integer.parseInt(lip[i], 2));
            if (i != 3) System.out.print(".");
        }
        System.out.println();
    }

    static String appendZeros(String s) {
        String temp = "00000000";
        return temp.substring(s.length()) + s;
    }
}
--------------------------------------------------------------------------------------------------------------------------------
Exp 10

---------------dnsserver-----------------

import java.io.*; 
import java.net.*; 
public class dnsserver 
{ 
private static int indexOf(String[] array, String str) 
{ 
str = str.trim(); 
for (int i=0; i < array.length; i++) 
{ 
if (array[i].equals(str)) return i; 
} 
return -1; 
} 
public static void main(String arg[])throws IOException 
{ 
String[] hosts = {"zoho.com", "gmail.com","google.com", "facebook.com"};
String[] ip = {"172.28.251.59", "172.217.11.5","172.217.11.14", 
"31.13.71.36"}; System.out.println("Press Ctrl + C to Quit"); 
while (true) 
{ 
DatagramSocket serversocket=new DatagramSocket(1362); 
byte[] senddata = new byte[1021]; 
byte[] receivedata = new byte[1021]; 
DatagramPacket recvpack = new DatagramPacket(receivedata, 
receivedata.length); 
serversocket.receive(recvpack); 
String sen = new String(recvpack.getData()); 
InetAddress ipaddress = recvpack.getAddress(); 
int port = recvpack.getPort(); 
String capsent; 
System.out.println("Request for host " + sen); 
if(indexOf (hosts, sen) != -1) 
capsent = ip[indexOf (hosts, sen)]; 
else 
capsent = "Host Not Found"; senddata = capsent.getBytes(); 
DatagramPacket pack = new DatagramPacket (senddata, 
senddata.length,ipaddress,port); 
serversocket.send(pack); 
serversocket.close(); 
} 
} 
} 


------------------dnsclient-----------------------

import java.io.*; 
import java.net.*; 
public class dnsclient 
{
public static void main(String args[])throws IOException 
{ 
BufferedReader br = new BufferedReader(new 
InputStreamReader(System.in)); 
DatagramSocket clientsocket = new DatagramSocket(); 
InetAddress ipaddress; 
if (args.length == 0) 
ipaddress = InetAddress.getLocalHost(); 
else 
ipaddress = InetAddress.getByName(args[0]); 
byte[] senddata = new byte[1024]; 
byte[] receivedata = new byte[1024]; 
int portaddr = 1362; 
System.out.print("Enter the hostname : "); 
String sentence = br.readLine(); 
senddata = sentence.getBytes(); 
DatagramPacket pack = new DatagramPacket(senddata,senddata.length, ipaddress,portaddr); 
clientsocket.send(pack); 
DatagramPacket recvpack =new 
DatagramPacket(receivedata,receivedata.length); 
clientsocket.receive(recvpack); 
String modified = new String(recvpack.getData()); 
System.out.println("IP Address: " + modified); 
clientsocket.close(); 
} 
}
--------------------------------------------------------------------------------------------------------------------------------
*/

